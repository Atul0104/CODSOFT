#include<stdio.h>
#include<stdlib.h>
int i, j, k, a, b, u, v, n, ne = 1;
int min, mincost = 0, cost[9][9], parent[9];
int find(int);
int uni(int, int);
int main() {
    printf("\n\tImplementation of Kruskal's algorithm\n");
    printf("\nEnter the number of vertices:");
    scanf("%d", &n);
    printf("\nEnter the cost adjacency matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = 999;
        }
    }
    printf("The edges of Minimum Cost Spanning Tree are\n");
    while (ne < n) {
        for (i = 1, min = 999; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    a = u = i;
                    b = v = j;
                }
            }
        }

        u = find(u);
        v = find(v);
        if (uni(u, v)) {
            printf("%d edge (%d,%d) = %d\n", ne++, a, b, min);
            mincost += min;
        }
        cost[a][b] = cost[b][a] = 999;
    }

    printf("\n\tMinimum cost = %d\n", mincost);
    return 0;
}

int find(int i) {
    while (parent[i])
        i = parent[i];
    return i;
}
int uni(int i, int j) {
    if (i != j) {
        parent[j] = i;
        return 1;
    }
    return 0;
}
Title: Implement Greedy search algorithm for any of the following application:
VI. Kruskal's Minimal Spanning Tree Algorithm
Theory: 
⚫ Kruskal's algorithm to find the minimum cost spanning tree uses the greedy approach. 
⚫ This algorithm treats the graph as a forest and every node it has as an individual tree. 
⚫  A tree connects to another only and only if, it has the least cost among all available options and does not 
violate MST properties 
Algorithm: 
⚫ Kruskal’s Algorithm is a famous greedy algorithm. 
⚫ It is used for finding the Minimum Spanning Tree (MST) of a given graph. 
⚫ To apply Kruskal’s algorithm, the given graph must be weighted, connected and undirected. 
Steps: 
⚫ Sort all the edges from low weight to high weight. 
⚫ Take the edge with the lowest weight and use it to connect the vertices of graph. 
⚫ If adding an edge creates a cycle, then reject that edge and go for the next least weight edge. 
⚫ Keep adding edges until all the vertices are connected and a Minimum Spanning Tree (MST) is obtained.
